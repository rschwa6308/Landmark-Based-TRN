# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PeakExtractor
                                 A QGIS plugin
 This plugin procedurally extracts morphological peaks from a given DEM.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-10
        copyright            : (C) 2021 by NASA JPL
        email                : russells@jpl.nasa.gov
 ***************************************************************************/
"""

__author__ = "NASA JPL"
__date__ = "2021-03-10"
__copyright__ = "(C) 2021 by NASA JPL"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink,
                       QgsFields,
                       QgsWkbTypes)


import processing
# import grass.script as grass


import math


def round_up_to_odd(x: float) -> int:
    """round the given float up to the nearest odd integer"""
    n = math.ceil(x)
    return n + (1 - n%2)


class PeakExtractorAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = "INPUT"
    ANALYSIS_WINDOW_SIZE = "ANALYSIS_WINDOW_SIZE"
    PEAK_SPACING = "PEAK_SPACING"

    OUTPUT = "OUTPUT"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Elevation Map
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr("DEM"),
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.ANALYSIS_WINDOW_SIZE,
                self.tr("Size of analysis window, meters"),
                QgsProcessingParameterNumber.Double,
                defaultValue=500.0
            ),
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.PEAK_SPACING,
                self.tr("Minimum distance between distinct peaks, meters"),
                QgsProcessingParameterNumber.Double,
                defaultValue=100.0
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr("Extracted Peaks")
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        dem = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        x_size, y_size = dem.rasterUnitsPerPixelX(), dem.rasterUnitsPerPixelY()

        window_size_meters = self.parameterAsDouble(parameters, self.ANALYSIS_WINDOW_SIZE, context)
        window_size_pixels = round_up_to_odd(window_size_meters / x_size)       # grass requires a "center" pixel

        feedback.pushInfo(f"Using analysis window of size {window_size_pixels}px")

        if window_size_pixels <= 1:
            raise ValueError(f"Analysis window must be >1px per side (given DEM has pixel size {x_size}m x {y_size}m)")
        
        dem_size = dem.width() * dem.height()
        if window_size_pixels >= 50 and dem_size >= 10**6:
            feedback.pushInfo("WARNING: large raster + large analysis window can be extremely slow. Consider downsampling the DEM first.")


        feedback.pushInfo("Classifying terrain. . .")
        morpho_param_layer_name = processing.run(
            "grass7:r.param.scale",
            {
                "input": parameters[self.INPUT],
                "size": window_size_pixels,
                'method' : 9,       # 'feature'
                "output": QgsProcessing.TEMPORARY_OUTPUT,
                # --- defaults ---
                '-c' : False,
                'GRASS_RASTER_FORMAT_META': '',
                'GRASS_RASTER_FORMAT_OPT': '',
                'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                'GRASS_REGION_PARAMETER': None,
                'curvature_tolerance' : 0.0001,
                'exponent' : 0,
                'slope_tolerance': 1,
                'zscale': 1
            },
            context=context, feedback=feedback, is_child_algorithm=True
        )["output"]

        if feedback.isCanceled(): return {}


        feedback.pushInfo("Vectorizing. . .")
        polygons_layer_name = processing.run(
            "native:pixelstopolygons",
            {
                "INPUT_RASTER": morpho_param_layer_name,
                "FIELD_NAME" : "VALUE",
                "RASTER_BAND": 1,
                "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT
            },
            context=context, feedback=feedback, is_child_algorithm=True
        )["OUTPUT"]

        if feedback.isCanceled(): return {}


        feedback.pushInfo("Extracting peak pixels. . .")
        filtered_polygons_layer_name = processing.run(
            "native:extractbyattribute",
            {
                "INPUT": polygons_layer_name,
                "FIELD": "VALUE",
                "OPERATOR": 0,      # '='
                "VALUE": 6,         # peaks
                "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT
            },
            context=context, feedback=feedback, is_child_algorithm=True
        )["OUTPUT"]

        if feedback.isCanceled(): return {}


        buffer_distance = self.parameterAsDouble(parameters, self.PEAK_SPACING, context) / 2.0
        feedback.pushInfo("Buffering peaks. . .")
        buffered_polygons_layer_name = processing.run(
            "native:buffer",
            {
                "INPUT": filtered_polygons_layer_name,
                "DISTANCE": buffer_distance,
                "DISSOLVE": True,
                "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT
            },
            context=context, feedback=feedback, is_child_algorithm=True
        )["OUTPUT"]


        feedback.pushInfo("Dissolving peaks. . .")
        dissolved_polygons_layer_name = processing.run(
            "native:dissolve",
            {
                "INPUT": buffered_polygons_layer_name,
                "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT
            },
            context=context, feedback=feedback, is_child_algorithm=True
        )["OUTPUT"]

        if feedback.isCanceled(): return {}


        feedback.pushInfo("Computing peak centers. . .")
        centroids_layer_name = processing.run(
            "native:centroids",
            {
                "INPUT": dissolved_polygons_layer_name,
                "ALL_PARTS": True,
                "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT
            },
            context=context, feedback=feedback, is_child_algorithm=True
        )["OUTPUT"]
        centroids_layer = context.takeResultLayer(centroids_layer_name)

        if feedback.isCanceled(): return {}


        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            QgsFields(),        # no fields
            QgsWkbTypes.Point,
            dem.crs()
        )

        n = 0
        for p in centroids_layer.getFeatures():
            if feedback.isCanceled(): return {}
            sink.addFeature(p)
            n += 1

        feedback.pushInfo(f"Number of peaks detected: {n}")


        return {
            self.OUTPUT: dest_id
        }

    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Extract Peaks"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ""

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return PeakExtractorAlgorithm()
